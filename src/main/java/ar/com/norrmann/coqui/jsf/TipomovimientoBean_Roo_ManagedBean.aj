// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.TipomovimientoBean;
import ar.com.norrmann.coqui.jsf.converter.TipoitemConverter;
import ar.com.norrmann.coqui.model.Movimientoitem;
import ar.com.norrmann.coqui.model.Tipoitem;
import ar.com.norrmann.coqui.model.Tipomovimiento;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TipomovimientoBean_Roo_ManagedBean {
    
    declare @type: TipomovimientoBean: @ManagedBean(name = "tipomovimientoBean");
    
    declare @type: TipomovimientoBean: @SessionScoped;
    
    private String TipomovimientoBean.name = "Tipomovimientoes";
    
    private Tipomovimiento TipomovimientoBean.tipomovimiento;
    
    private List<Tipomovimiento> TipomovimientoBean.allTipomovimientoes;
    
    private boolean TipomovimientoBean.dataVisible = false;
    
    private List<String> TipomovimientoBean.columns;
    
    private HtmlPanelGrid TipomovimientoBean.createPanelGrid;
    
    private HtmlPanelGrid TipomovimientoBean.editPanelGrid;
    
    private HtmlPanelGrid TipomovimientoBean.viewPanelGrid;
    
    private boolean TipomovimientoBean.createDialogVisible = false;
    
    private List<Movimientoitem> TipomovimientoBean.selectedMovimientoitems;
    
    @PostConstruct
    public void TipomovimientoBean.init() {
        columns = new ArrayList<String>();
        columns.add("tipoMovimiento");
        columns.add("diferencia");
    }
    
    public String TipomovimientoBean.getName() {
        return name;
    }
    
    public List<String> TipomovimientoBean.getColumns() {
        return columns;
    }
    
    public List<Tipomovimiento> TipomovimientoBean.getAllTipomovimientoes() {
        return allTipomovimientoes;
    }
    
    public void TipomovimientoBean.setAllTipomovimientoes(List<Tipomovimiento> allTipomovimientoes) {
        this.allTipomovimientoes = allTipomovimientoes;
    }
    
    public String TipomovimientoBean.findAllTipomovimientoes() {
        allTipomovimientoes = Tipomovimiento.findAllTipomovimientoes();
        dataVisible = !allTipomovimientoes.isEmpty();
        return null;
    }
    
    public boolean TipomovimientoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TipomovimientoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TipomovimientoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TipomovimientoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TipomovimientoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TipomovimientoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TipomovimientoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TipomovimientoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TipomovimientoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText movimientoitemsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        movimientoitemsCreateOutput.setId("movimientoitemsCreateOutput");
        movimientoitemsCreateOutput.setValue("Movimientoitems:   ");
        htmlPanelGrid.getChildren().add(movimientoitemsCreateOutput);
        
        HtmlOutputText movimientoitemsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        movimientoitemsCreateInput.setId("movimientoitemsCreateInput");
        movimientoitemsCreateInput.setValue("This relationship is managed from the Movimientoitem side");
        htmlPanelGrid.getChildren().add(movimientoitemsCreateInput);
        
        Message movimientoitemsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        movimientoitemsCreateInputMessage.setId("movimientoitemsCreateInputMessage");
        movimientoitemsCreateInputMessage.setFor("movimientoitemsCreateInput");
        movimientoitemsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(movimientoitemsCreateInputMessage);
        
        HtmlOutputText tipoItemIdCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdCreateOutput.setId("tipoItemIdCreateOutput");
        tipoItemIdCreateOutput.setValue("Tipo Item Id:   ");
        htmlPanelGrid.getChildren().add(tipoItemIdCreateOutput);
        
        AutoComplete tipoItemIdCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoItemIdCreateInput.setId("tipoItemIdCreateInput");
        tipoItemIdCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.tipoItemId}", Tipoitem.class));
        tipoItemIdCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tipomovimientoBean.completeTipoItemId}", List.class, new Class[] { String.class }));
        tipoItemIdCreateInput.setDropdown(true);
        tipoItemIdCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoItemId", String.class));
        tipoItemIdCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoItemId.tipoItem}", String.class));
        tipoItemIdCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoItemId}", Tipoitem.class));
        tipoItemIdCreateInput.setConverter(new TipoitemConverter());
        tipoItemIdCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoItemIdCreateInput);
        
        Message tipoItemIdCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoItemIdCreateInputMessage.setId("tipoItemIdCreateInputMessage");
        tipoItemIdCreateInputMessage.setFor("tipoItemIdCreateInput");
        tipoItemIdCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoItemIdCreateInputMessage);
        
        HtmlOutputText tipoMovimientoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoMovimientoCreateOutput.setId("tipoMovimientoCreateOutput");
        tipoMovimientoCreateOutput.setValue("Tipo Movimiento: * ");
        htmlPanelGrid.getChildren().add(tipoMovimientoCreateOutput);
        
        InputTextarea tipoMovimientoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        tipoMovimientoCreateInput.setId("tipoMovimientoCreateInput");
        tipoMovimientoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.tipoMovimiento}", String.class));
        LengthValidator tipoMovimientoCreateInputValidator = new LengthValidator();
        tipoMovimientoCreateInputValidator.setMaximum(255);
        tipoMovimientoCreateInput.addValidator(tipoMovimientoCreateInputValidator);
        tipoMovimientoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoMovimientoCreateInput);
        
        Message tipoMovimientoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoMovimientoCreateInputMessage.setId("tipoMovimientoCreateInputMessage");
        tipoMovimientoCreateInputMessage.setFor("tipoMovimientoCreateInput");
        tipoMovimientoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoMovimientoCreateInputMessage);
        
        HtmlOutputText diferenciaCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        diferenciaCreateOutput.setId("diferenciaCreateOutput");
        diferenciaCreateOutput.setValue("Diferencia: * ");
        htmlPanelGrid.getChildren().add(diferenciaCreateOutput);
        
        Spinner diferenciaCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        diferenciaCreateInput.setId("diferenciaCreateInput");
        diferenciaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.diferencia}", Integer.class));
        diferenciaCreateInput.setRequired(true);
        
        htmlPanelGrid.getChildren().add(diferenciaCreateInput);
        
        Message diferenciaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        diferenciaCreateInputMessage.setId("diferenciaCreateInputMessage");
        diferenciaCreateInputMessage.setFor("diferenciaCreateInput");
        diferenciaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(diferenciaCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipomovimientoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText movimientoitemsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        movimientoitemsEditOutput.setId("movimientoitemsEditOutput");
        movimientoitemsEditOutput.setValue("Movimientoitems:   ");
        htmlPanelGrid.getChildren().add(movimientoitemsEditOutput);
        
        HtmlOutputText movimientoitemsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        movimientoitemsEditInput.setId("movimientoitemsEditInput");
        movimientoitemsEditInput.setValue("This relationship is managed from the Movimientoitem side");
        htmlPanelGrid.getChildren().add(movimientoitemsEditInput);
        
        Message movimientoitemsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        movimientoitemsEditInputMessage.setId("movimientoitemsEditInputMessage");
        movimientoitemsEditInputMessage.setFor("movimientoitemsEditInput");
        movimientoitemsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(movimientoitemsEditInputMessage);
        
        HtmlOutputText tipoItemIdEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdEditOutput.setId("tipoItemIdEditOutput");
        tipoItemIdEditOutput.setValue("Tipo Item Id:   ");
        htmlPanelGrid.getChildren().add(tipoItemIdEditOutput);
        
        AutoComplete tipoItemIdEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoItemIdEditInput.setId("tipoItemIdEditInput");
        tipoItemIdEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.tipoItemId}", Tipoitem.class));
        tipoItemIdEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tipomovimientoBean.completeTipoItemId}", List.class, new Class[] { String.class }));
        tipoItemIdEditInput.setDropdown(true);
        tipoItemIdEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoItemId", String.class));
        tipoItemIdEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoItemId.tipoItem}", String.class));
        tipoItemIdEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoItemId}", Tipoitem.class));
        tipoItemIdEditInput.setConverter(new TipoitemConverter());
        tipoItemIdEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoItemIdEditInput);
        
        Message tipoItemIdEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoItemIdEditInputMessage.setId("tipoItemIdEditInputMessage");
        tipoItemIdEditInputMessage.setFor("tipoItemIdEditInput");
        tipoItemIdEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoItemIdEditInputMessage);
        
        HtmlOutputText tipoMovimientoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoMovimientoEditOutput.setId("tipoMovimientoEditOutput");
        tipoMovimientoEditOutput.setValue("Tipo Movimiento: * ");
        htmlPanelGrid.getChildren().add(tipoMovimientoEditOutput);
        
        InputTextarea tipoMovimientoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        tipoMovimientoEditInput.setId("tipoMovimientoEditInput");
        tipoMovimientoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.tipoMovimiento}", String.class));
        LengthValidator tipoMovimientoEditInputValidator = new LengthValidator();
        tipoMovimientoEditInputValidator.setMaximum(255);
        tipoMovimientoEditInput.addValidator(tipoMovimientoEditInputValidator);
        tipoMovimientoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoMovimientoEditInput);
        
        Message tipoMovimientoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoMovimientoEditInputMessage.setId("tipoMovimientoEditInputMessage");
        tipoMovimientoEditInputMessage.setFor("tipoMovimientoEditInput");
        tipoMovimientoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoMovimientoEditInputMessage);
        
        HtmlOutputText diferenciaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        diferenciaEditOutput.setId("diferenciaEditOutput");
        diferenciaEditOutput.setValue("Diferencia: * ");
        htmlPanelGrid.getChildren().add(diferenciaEditOutput);
        
        Spinner diferenciaEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        diferenciaEditInput.setId("diferenciaEditInput");
        diferenciaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.diferencia}", Integer.class));
        diferenciaEditInput.setRequired(true);
        
        htmlPanelGrid.getChildren().add(diferenciaEditInput);
        
        Message diferenciaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        diferenciaEditInputMessage.setId("diferenciaEditInputMessage");
        diferenciaEditInputMessage.setFor("diferenciaEditInput");
        diferenciaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(diferenciaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipomovimientoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText movimientoitemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        movimientoitemsLabel.setId("movimientoitemsLabel");
        movimientoitemsLabel.setValue("Movimientoitems:   ");
        htmlPanelGrid.getChildren().add(movimientoitemsLabel);
        
        HtmlOutputText movimientoitemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        movimientoitemsValue.setId("movimientoitemsValue");
        movimientoitemsValue.setValue("This relationship is managed from the Movimientoitem side");
        htmlPanelGrid.getChildren().add(movimientoitemsValue);
        
        HtmlOutputText tipoItemIdLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdLabel.setId("tipoItemIdLabel");
        tipoItemIdLabel.setValue("Tipo Item Id:   ");
        htmlPanelGrid.getChildren().add(tipoItemIdLabel);
        
        HtmlOutputText tipoItemIdValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.tipoItemId}", Tipoitem.class));
        tipoItemIdValue.setConverter(new TipoitemConverter());
        htmlPanelGrid.getChildren().add(tipoItemIdValue);
        
        HtmlOutputText tipoMovimientoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoMovimientoLabel.setId("tipoMovimientoLabel");
        tipoMovimientoLabel.setValue("Tipo Movimiento:   ");
        htmlPanelGrid.getChildren().add(tipoMovimientoLabel);
        
        InputTextarea tipoMovimientoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        tipoMovimientoValue.setId("tipoMovimientoValue");
        tipoMovimientoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.tipoMovimiento}", String.class));
        tipoMovimientoValue.setReadonly(true);
        tipoMovimientoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(tipoMovimientoValue);
        
        HtmlOutputText diferenciaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        diferenciaLabel.setId("diferenciaLabel");
        diferenciaLabel.setValue("Diferencia:   ");
        htmlPanelGrid.getChildren().add(diferenciaLabel);
        
        HtmlOutputText diferenciaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        diferenciaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipomovimientoBean.tipomovimiento.diferencia}", String.class));
        htmlPanelGrid.getChildren().add(diferenciaValue);
        
        return htmlPanelGrid;
    }
    
    public Tipomovimiento TipomovimientoBean.getTipomovimiento() {
        if (tipomovimiento == null) {
            tipomovimiento = new Tipomovimiento();
        }
        return tipomovimiento;
    }
    
    public void TipomovimientoBean.setTipomovimiento(Tipomovimiento tipomovimiento) {
        this.tipomovimiento = tipomovimiento;
    }
    
    public List<Movimientoitem> TipomovimientoBean.getSelectedMovimientoitems() {
        return selectedMovimientoitems;
    }
    
    public void TipomovimientoBean.setSelectedMovimientoitems(List<Movimientoitem> selectedMovimientoitems) {
        if (selectedMovimientoitems != null) {
            tipomovimiento.setMovimientoitems(new HashSet<Movimientoitem>(selectedMovimientoitems));
        }
        this.selectedMovimientoitems = selectedMovimientoitems;
    }
    
    public List<Tipoitem> TipomovimientoBean.completeTipoItemId(String query) {
        List<Tipoitem> suggestions = new ArrayList<Tipoitem>();
        for (Tipoitem tipoitem : Tipoitem.findAllTipoitems()) {
            String tipoitemStr = String.valueOf(tipoitem.getTipoItem());
            if (tipoitemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoitem);
            }
        }
        return suggestions;
    }
    
    public String TipomovimientoBean.onEdit() {
        if (tipomovimiento != null && tipomovimiento.getMovimientoitems() != null) {
            selectedMovimientoitems = new ArrayList<Movimientoitem>(tipomovimiento.getMovimientoitems());
        }
        return null;
    }
    
    public boolean TipomovimientoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TipomovimientoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TipomovimientoBean.displayList() {
        createDialogVisible = false;
        findAllTipomovimientoes();
        return "tipomovimiento";
    }
    
    public String TipomovimientoBean.displayCreateDialog() {
        tipomovimiento = new Tipomovimiento();
        createDialogVisible = true;
        return "tipomovimiento";
    }
    
    public String TipomovimientoBean.persist() {
        String message = "";
        if (tipomovimiento.getId() != null) {
            tipomovimiento.merge();
            message = "Successfully updated";
        } else {
            tipomovimiento.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipomovimientoes();
    }
    
    public String TipomovimientoBean.delete() {
        tipomovimiento.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipomovimientoes();
    }
    
    public void TipomovimientoBean.reset() {
        tipomovimiento = null;
        selectedMovimientoitems = null;
        createDialogVisible = false;
    }
    
    public void TipomovimientoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
