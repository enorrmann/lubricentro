// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.PagoBean;
import ar.com.norrmann.coqui.jsf.TipoDePago;
import ar.com.norrmann.coqui.jsf.converter.VentaConverter;
import ar.com.norrmann.coqui.model.Pago;
import ar.com.norrmann.coqui.model.Venta;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.event.CloseEvent;

privileged aspect PagoBean_Roo_ManagedBean {
    
    declare @type: PagoBean: @ManagedBean(name = "pagoBean");
    
    declare @type: PagoBean: @SessionScoped;
    
    private String PagoBean.name = "Pagoes";
    
    private Pago PagoBean.pago;
    
    private List<Pago> PagoBean.allPagoes;
    
    private boolean PagoBean.dataVisible = false;
    
    private List<String> PagoBean.columns;
    
    private HtmlPanelGrid PagoBean.createPanelGrid;
    
    private HtmlPanelGrid PagoBean.editPanelGrid;
    
    private HtmlPanelGrid PagoBean.viewPanelGrid;
    
    private boolean PagoBean.createDialogVisible = false;
    
    @PostConstruct
    public void PagoBean.init() {
        columns = new ArrayList<String>();
        columns.add("fecha");
        columns.add("importe");
        columns.add("observaciones");
    }
    
    public String PagoBean.getName() {
        return name;
    }
    
    public List<String> PagoBean.getColumns() {
        return columns;
    }
    
    public List<Pago> PagoBean.getAllPagoes() {
        return allPagoes;
    }
    
    public void PagoBean.setAllPagoes(List<Pago> allPagoes) {
        this.allPagoes = allPagoes;
    }
    
    public String PagoBean.findAllPagoes() {
        allPagoes = Pago.findAllPagoes();
        dataVisible = !allPagoes.isEmpty();
        return null;
    }
    
    public boolean PagoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PagoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PagoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PagoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PagoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PagoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PagoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PagoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PagoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText fechaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaEditOutput.setId("fechaEditOutput");
        fechaEditOutput.setValue("Fecha: * ");
        htmlPanelGrid.getChildren().add(fechaEditOutput);
        
        Calendar fechaEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaEditInput.setId("fechaEditInput");
        fechaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.fecha}", Date.class));
        fechaEditInput.setNavigator(true);
        fechaEditInput.setEffect("slideDown");
        fechaEditInput.setPattern("dd/MM/yyyy");
        fechaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(fechaEditInput);
        
        Message fechaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaEditInputMessage.setId("fechaEditInputMessage");
        fechaEditInputMessage.setFor("fechaEditInput");
        fechaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaEditInputMessage);
        
        HtmlOutputText importeEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importeEditOutput.setId("importeEditOutput");
        importeEditOutput.setValue("Importe: * ");
        htmlPanelGrid.getChildren().add(importeEditOutput);
        
        InputText importeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        importeEditInput.setId("importeEditInput");
        importeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.importe}", BigDecimal.class));
        importeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(importeEditInput);
        
        Message importeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        importeEditInputMessage.setId("importeEditInputMessage");
        importeEditInputMessage.setFor("importeEditInput");
        importeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(importeEditInputMessage);
        
        HtmlOutputText ventaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ventaEditOutput.setId("ventaEditOutput");
        ventaEditOutput.setValue("Venta:   ");
        htmlPanelGrid.getChildren().add(ventaEditOutput);
        
        AutoComplete ventaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        ventaEditInput.setId("ventaEditInput");
        ventaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.venta}", Venta.class));
        ventaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pagoBean.completeVenta}", List.class, new Class[] { String.class }));
        ventaEditInput.setDropdown(true);
        ventaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "venta", String.class));
        ventaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{venta.fecha}", String.class));
        ventaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{venta}", Venta.class));
        ventaEditInput.setConverter(new VentaConverter());
        ventaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(ventaEditInput);
        
        Message ventaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ventaEditInputMessage.setId("ventaEditInputMessage");
        ventaEditInputMessage.setFor("ventaEditInput");
        ventaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ventaEditInputMessage);
        
        HtmlOutputText observacionesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        observacionesEditOutput.setId("observacionesEditOutput");
        observacionesEditOutput.setValue("Observaciones:   ");
        htmlPanelGrid.getChildren().add(observacionesEditOutput);
        
        InputText observacionesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        observacionesEditInput.setId("observacionesEditInput");
        observacionesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.observaciones}", String.class));
        htmlPanelGrid.getChildren().add(observacionesEditInput);
        
        Message observacionesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        observacionesEditInputMessage.setId("observacionesEditInputMessage");
        observacionesEditInputMessage.setFor("observacionesEditInput");
        observacionesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(observacionesEditInputMessage);
        
        HtmlOutputText tipodePagoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipodePagoEditOutput.setId("tipodePagoEditOutput");
        tipodePagoEditOutput.setValue("Tipode Pago: * ");
        htmlPanelGrid.getChildren().add(tipodePagoEditOutput);
        
        AutoComplete tipodePagoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipodePagoEditInput.setId("tipodePagoEditInput");
        tipodePagoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.tipodePago}", TipoDePago.class));
        tipodePagoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pagoBean.completeTipodePago}", List.class, new Class[] { String.class }));
        tipodePagoEditInput.setDropdown(true);
        tipodePagoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipodePagoEditInput);
        
        Message tipodePagoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipodePagoEditInputMessage.setId("tipodePagoEditInputMessage");
        tipodePagoEditInputMessage.setFor("tipodePagoEditInput");
        tipodePagoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipodePagoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PagoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText fechaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaLabel.setId("fechaLabel");
        fechaLabel.setValue("Fecha:   ");
        htmlPanelGrid.getChildren().add(fechaLabel);
        
        HtmlOutputText fechaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.fecha}", Date.class));
        DateTimeConverter fechaValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaValueConverter.setPattern("dd/MM/yyyy");
        fechaValue.setConverter(fechaValueConverter);
        htmlPanelGrid.getChildren().add(fechaValue);
        
        HtmlOutputText importeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importeLabel.setId("importeLabel");
        importeLabel.setValue("Importe:   ");
        htmlPanelGrid.getChildren().add(importeLabel);
        
        HtmlOutputText importeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        importeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.importe}", String.class));
        htmlPanelGrid.getChildren().add(importeValue);
        
        HtmlOutputText ventaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ventaLabel.setId("ventaLabel");
        ventaLabel.setValue("Venta:   ");
        htmlPanelGrid.getChildren().add(ventaLabel);
        
        HtmlOutputText ventaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ventaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.venta}", Venta.class));
        ventaValue.setConverter(new VentaConverter());
        htmlPanelGrid.getChildren().add(ventaValue);
        
        HtmlOutputText observacionesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        observacionesLabel.setId("observacionesLabel");
        observacionesLabel.setValue("Observaciones:   ");
        htmlPanelGrid.getChildren().add(observacionesLabel);
        
        HtmlOutputText observacionesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        observacionesValue.setId("observacionesValue");
        observacionesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.observaciones}", String.class));
        htmlPanelGrid.getChildren().add(observacionesValue);
        
        HtmlOutputText tipodePagoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipodePagoLabel.setId("tipodePagoLabel");
        tipodePagoLabel.setValue("Tipode Pago:   ");
        htmlPanelGrid.getChildren().add(tipodePagoLabel);
        
        HtmlOutputText tipodePagoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipodePagoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagoBean.pago.tipodePago}", String.class));
        htmlPanelGrid.getChildren().add(tipodePagoValue);
        
        return htmlPanelGrid;
    }
    
    public Pago PagoBean.getPago() {
        if (pago == null) {
            pago = new Pago();
        }
        return pago;
    }
    
    public void PagoBean.setPago(Pago pago) {
        this.pago = pago;
    }
    
    public List<Venta> PagoBean.completeVenta(String query) {
        List<Venta> suggestions = new ArrayList<Venta>();
        for (Venta venta : Venta.findAllVentas()) {
            String ventaStr = String.valueOf(venta.getFecha());
            if (ventaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(venta);
            }
        }
        return suggestions;
    }
    
    public List<TipoDePago> PagoBean.completeTipodePago(String query) {
        List<TipoDePago> suggestions = new ArrayList<TipoDePago>();
        for (TipoDePago tipoDePago : TipoDePago.values()) {
            if (tipoDePago.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoDePago);
            }
        }
        return suggestions;
    }
    
    public String PagoBean.onEdit() {
        return null;
    }
    
    public boolean PagoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PagoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PagoBean.displayList() {
        createDialogVisible = false;
        findAllPagoes();
        return "pago";
    }
    
    public String PagoBean.delete() {
        pago.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPagoes();
    }
    
    public void PagoBean.reset() {
        pago = null;
        createDialogVisible = false;
    }
    
    public void PagoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
