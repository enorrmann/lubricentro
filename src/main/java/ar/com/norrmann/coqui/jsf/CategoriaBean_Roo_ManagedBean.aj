// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.CategoriaBean;
import ar.com.norrmann.coqui.jsf.converter.TipoitemConverter;
import ar.com.norrmann.coqui.model.Categoria;
import ar.com.norrmann.coqui.model.Item;
import ar.com.norrmann.coqui.model.Tipoitem;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CategoriaBean_Roo_ManagedBean {
    
    declare @type: CategoriaBean: @ManagedBean(name = "categoriaBean");
    
    declare @type: CategoriaBean: @SessionScoped;
    
    private String CategoriaBean.name = "Categorias";
    
    private Categoria CategoriaBean.categoria;
    
    private List<Categoria> CategoriaBean.allCategorias;
    
    private boolean CategoriaBean.dataVisible = false;
    
    private List<String> CategoriaBean.columns;
    
    private HtmlPanelGrid CategoriaBean.createPanelGrid;
    
    private HtmlPanelGrid CategoriaBean.editPanelGrid;
    
    private HtmlPanelGrid CategoriaBean.viewPanelGrid;
    
    private boolean CategoriaBean.createDialogVisible = false;
    
    private List<Item> CategoriaBean.selectedItems;
    
    @PostConstruct
    public void CategoriaBean.init() {
        columns = new ArrayList<String>();
        columns.add("categoria");
    }
    
    public String CategoriaBean.getName() {
        return name;
    }
    
    public List<String> CategoriaBean.getColumns() {
        return columns;
    }
    
    public List<Categoria> CategoriaBean.getAllCategorias() {
        return allCategorias;
    }
    
    public void CategoriaBean.setAllCategorias(List<Categoria> allCategorias) {
        this.allCategorias = allCategorias;
    }
    
    public String CategoriaBean.findAllCategorias() {
        allCategorias = Categoria.findAllCategorias();
        dataVisible = !allCategorias.isEmpty();
        return null;
    }
    
    public boolean CategoriaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CategoriaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CategoriaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CategoriaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CategoriaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CategoriaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText itemsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsEditOutput.setId("itemsEditOutput");
        itemsEditOutput.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsEditOutput);
        
        HtmlOutputText itemsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsEditInput.setId("itemsEditInput");
        itemsEditInput.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsEditInput);
        
        Message itemsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemsEditInputMessage.setId("itemsEditInputMessage");
        itemsEditInputMessage.setFor("itemsEditInput");
        itemsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemsEditInputMessage);
        
        HtmlOutputText tipoItemIdEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdEditOutput.setId("tipoItemIdEditOutput");
        tipoItemIdEditOutput.setValue("Tipo Item Id:   ");
        htmlPanelGrid.getChildren().add(tipoItemIdEditOutput);
        
        AutoComplete tipoItemIdEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoItemIdEditInput.setId("tipoItemIdEditInput");
        tipoItemIdEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.tipoItemId}", Tipoitem.class));
        tipoItemIdEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{categoriaBean.completeTipoItemId}", List.class, new Class[] { String.class }));
        tipoItemIdEditInput.setDropdown(true);
        tipoItemIdEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoItemId", String.class));
        tipoItemIdEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoItemId.tipoItem}", String.class));
        tipoItemIdEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoItemId}", Tipoitem.class));
        tipoItemIdEditInput.setConverter(new TipoitemConverter());
        tipoItemIdEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoItemIdEditInput);
        
        Message tipoItemIdEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoItemIdEditInputMessage.setId("tipoItemIdEditInputMessage");
        tipoItemIdEditInputMessage.setFor("tipoItemIdEditInput");
        tipoItemIdEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoItemIdEditInputMessage);
        
        HtmlOutputText categoriaEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriaEditOutput.setId("categoriaEditOutput");
        categoriaEditOutput.setValue("Categoria: * ");
        htmlPanelGrid.getChildren().add(categoriaEditOutput);
        
        InputTextarea categoriaEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        categoriaEditInput.setId("categoriaEditInput");
        categoriaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.categoria}", String.class));
        LengthValidator categoriaEditInputValidator = new LengthValidator();
        categoriaEditInputValidator.setMaximum(255);
        categoriaEditInput.addValidator(categoriaEditInputValidator);
        categoriaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(categoriaEditInput);
        
        Message categoriaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriaEditInputMessage.setId("categoriaEditInputMessage");
        categoriaEditInputMessage.setFor("categoriaEditInput");
        categoriaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText itemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsLabel.setId("itemsLabel");
        itemsLabel.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsLabel);
        
        HtmlOutputText itemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsValue.setId("itemsValue");
        itemsValue.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsValue);
        
        HtmlOutputText tipoItemIdLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdLabel.setId("tipoItemIdLabel");
        tipoItemIdLabel.setValue("Tipo Item Id:   ");
        htmlPanelGrid.getChildren().add(tipoItemIdLabel);
        
        HtmlOutputText tipoItemIdValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.tipoItemId}", Tipoitem.class));
        tipoItemIdValue.setConverter(new TipoitemConverter());
        htmlPanelGrid.getChildren().add(tipoItemIdValue);
        
        HtmlOutputText categoriaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriaLabel.setId("categoriaLabel");
        categoriaLabel.setValue("Categoria:   ");
        htmlPanelGrid.getChildren().add(categoriaLabel);
        
        InputTextarea categoriaValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        categoriaValue.setId("categoriaValue");
        categoriaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.categoria}", String.class));
        categoriaValue.setReadonly(true);
        categoriaValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(categoriaValue);
        
        return htmlPanelGrid;
    }
    
    public Categoria CategoriaBean.getCategoria() {
        if (categoria == null) {
            categoria = new Categoria();
        }
        return categoria;
    }
    
    public void CategoriaBean.setCategoria(Categoria categoria) {
        this.categoria = categoria;
    }
    
    public List<Item> CategoriaBean.getSelectedItems() {
        return selectedItems;
    }
    
    public void CategoriaBean.setSelectedItems(List<Item> selectedItems) {
        if (selectedItems != null) {
            categoria.setItems(new HashSet<Item>(selectedItems));
        }
        this.selectedItems = selectedItems;
    }
    
    public List<Tipoitem> CategoriaBean.completeTipoItemId(String query) {
        List<Tipoitem> suggestions = new ArrayList<Tipoitem>();
        for (Tipoitem tipoitem : Tipoitem.findAllTipoitems()) {
            String tipoitemStr = String.valueOf(tipoitem.getTipoItem());
            if (tipoitemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoitem);
            }
        }
        return suggestions;
    }
    
    public String CategoriaBean.onEdit() {
        if (categoria != null && categoria.getItems() != null) {
            selectedItems = new ArrayList<Item>(categoria.getItems());
        }
        return null;
    }
    
    public boolean CategoriaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CategoriaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CategoriaBean.displayList() {
        createDialogVisible = false;
        findAllCategorias();
        return "categoria";
    }
    
    public String CategoriaBean.displayCreateDialog() {
        categoria = new Categoria();
        createDialogVisible = true;
        return "categoria";
    }
    
    public String CategoriaBean.persist() {
        String message = "";
        if (categoria.getId() != null) {
            categoria.merge();
            message = "Successfully updated";
        } else {
            categoria.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorias();
    }
    
    public String CategoriaBean.delete() {
        categoria.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorias();
    }
    
    public void CategoriaBean.reset() {
        categoria = null;
        selectedItems = null;
        createDialogVisible = false;
    }
    
    public void CategoriaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
