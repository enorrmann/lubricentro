// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.MovimientoitemBean;
import ar.com.norrmann.coqui.model.Itemservicio;
import ar.com.norrmann.coqui.model.Movimientoitem;
import ar.com.norrmann.coqui.model.Tipomovimiento;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import org.primefaces.event.CloseEvent;

privileged aspect MovimientoitemBean_Roo_ManagedBean {
    
    declare @type: MovimientoitemBean: @ManagedBean(name = "movimientoitemBean");
    
    declare @type: MovimientoitemBean: @SessionScoped;
    
    private List<Movimientoitem> MovimientoitemBean.allMovimientoitems;
    
    private boolean MovimientoitemBean.dataVisible = false;
    
    private HtmlPanelGrid MovimientoitemBean.createPanelGrid;
    
    private HtmlPanelGrid MovimientoitemBean.editPanelGrid;
    
    private HtmlPanelGrid MovimientoitemBean.viewPanelGrid;
    
    private List<Itemservicio> MovimientoitemBean.selectedItemservicios;
    
    public String MovimientoitemBean.getName() {
        return name;
    }
    
    public List<String> MovimientoitemBean.getColumns() {
        return columns;
    }
    
    public List<Movimientoitem> MovimientoitemBean.getAllMovimientoitems() {
        return allMovimientoitems;
    }
    
    public void MovimientoitemBean.setAllMovimientoitems(List<Movimientoitem> allMovimientoitems) {
        this.allMovimientoitems = allMovimientoitems;
    }
    
    public String MovimientoitemBean.findAllMovimientoitems() {
        allMovimientoitems = Movimientoitem.findAllMovimientoitems();
        dataVisible = !allMovimientoitems.isEmpty();
        return null;
    }
    
    public boolean MovimientoitemBean.isDataVisible() {
        return dataVisible;
    }
    
    public void MovimientoitemBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid MovimientoitemBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void MovimientoitemBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid MovimientoitemBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void MovimientoitemBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid MovimientoitemBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void MovimientoitemBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public Movimientoitem MovimientoitemBean.getMovimientoitem() {
        if (movimientoitem == null) {
            movimientoitem = new Movimientoitem();
        }
        return movimientoitem;
    }
    
    public void MovimientoitemBean.setMovimientoitem(Movimientoitem movimientoitem) {
        this.movimientoitem = movimientoitem;
    }
    
    public List<Itemservicio> MovimientoitemBean.getSelectedItemservicios() {
        return selectedItemservicios;
    }
    
    public void MovimientoitemBean.setSelectedItemservicios(List<Itemservicio> selectedItemservicios) {
        if (selectedItemservicios != null) {
            movimientoitem.setItemservicios(new HashSet<Itemservicio>(selectedItemservicios));
        }
        this.selectedItemservicios = selectedItemservicios;
    }
    
    public List<Tipomovimiento> MovimientoitemBean.completeTipoMovimientoId(String query) {
        List<Tipomovimiento> suggestions = new ArrayList<Tipomovimiento>();
        for (Tipomovimiento tipomovimiento : Tipomovimiento.findAllTipomovimientoes()) {
            String tipomovimientoStr = String.valueOf(tipomovimiento.getTipoMovimiento() +  " "  + tipomovimiento.getDiferencia());
            if (tipomovimientoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipomovimiento);
            }
        }
        return suggestions;
    }
    
    public boolean MovimientoitemBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void MovimientoitemBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String MovimientoitemBean.displayList() {
        createDialogVisible = false;
        findAllMovimientoitems();
        return "movimientoitem";
    }
    
    public String MovimientoitemBean.displayCreateDialog() {
        movimientoitem = new Movimientoitem();
        createDialogVisible = true;
        return "movimientoitem";
    }
    
    public void MovimientoitemBean.reset() {
        movimientoitem = null;
        selectedItemservicios = null;
        createDialogVisible = false;
    }
    
    public void MovimientoitemBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
