// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.ClienteBean;
import ar.com.norrmann.coqui.model.Automotor;
import ar.com.norrmann.coqui.model.Cliente;
import java.util.HashSet;
import java.util.List;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ClienteBean_Roo_ManagedBean {
    
    declare @type: ClienteBean: @ManagedBean(name = "clienteBean");
    
    declare @type: ClienteBean: @SessionScoped;
    
    private String ClienteBean.name = "Clientes";
    
    private Cliente ClienteBean.cliente;
    
    private List<Cliente> ClienteBean.allClientes;
    
    private boolean ClienteBean.dataVisible = false;
    
    private HtmlPanelGrid ClienteBean.createPanelGrid;
    
    private HtmlPanelGrid ClienteBean.editPanelGrid;
    
    private HtmlPanelGrid ClienteBean.viewPanelGrid;
    
    private boolean ClienteBean.createDialogVisible = false;
    
    private List<Automotor> ClienteBean.selectedAutomotors;
    
    public String ClienteBean.getName() {
        return name;
    }
    
    public List<String> ClienteBean.getColumns() {
        return columns;
    }
    
    public List<Cliente> ClienteBean.getAllClientes() {
        return allClientes;
    }
    
    public void ClienteBean.setAllClientes(List<Cliente> allClientes) {
        this.allClientes = allClientes;
    }
    
    public String ClienteBean.findAllClientes() {
        allClientes = Cliente.findAllClientes();
        dataVisible = !allClientes.isEmpty();
        return null;
    }
    
    public boolean ClienteBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ClienteBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ClienteBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ClienteBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ClienteBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ClienteBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText automotorsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsLabel.setId("automotorsLabel");
        automotorsLabel.setValue("Automotors:   ");
        htmlPanelGrid.getChildren().add(automotorsLabel);
        
        HtmlOutputText automotorsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsValue.setId("automotorsValue");
        automotorsValue.setValue("This relationship is managed from the Automotor side");
        htmlPanelGrid.getChildren().add(automotorsValue);
        
        HtmlOutputText apellidoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        apellidoLabel.setId("apellidoLabel");
        apellidoLabel.setValue("Apellido:   ");
        htmlPanelGrid.getChildren().add(apellidoLabel);
        
        InputTextarea apellidoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        apellidoValue.setId("apellidoValue");
        apellidoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.apellido}", String.class));
        apellidoValue.setReadonly(true);
        apellidoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(apellidoValue);
        
        HtmlOutputText domicilioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        domicilioLabel.setId("domicilioLabel");
        domicilioLabel.setValue("Domicilio:   ");
        htmlPanelGrid.getChildren().add(domicilioLabel);
        
        InputTextarea domicilioValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        domicilioValue.setId("domicilioValue");
        domicilioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.domicilio}", String.class));
        domicilioValue.setReadonly(true);
        domicilioValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(domicilioValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        InputTextarea emailValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.email}", String.class));
        emailValue.setReadonly(true);
        emailValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText nombresLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombresLabel.setId("nombresLabel");
        nombresLabel.setValue("Nombres:   ");
        htmlPanelGrid.getChildren().add(nombresLabel);
        
        InputTextarea nombresValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombresValue.setId("nombresValue");
        nombresValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nombres}", String.class));
        nombresValue.setReadonly(true);
        nombresValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nombresValue);
        
        HtmlOutputText telefonoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        telefonoLabel.setId("telefonoLabel");
        telefonoLabel.setValue("Telefono:   ");
        htmlPanelGrid.getChildren().add(telefonoLabel);
        
        InputTextarea telefonoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        telefonoValue.setId("telefonoValue");
        telefonoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.telefono}", String.class));
        telefonoValue.setReadonly(true);
        telefonoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(telefonoValue);
        
        HtmlOutputText cuitLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cuitLabel.setId("cuitLabel");
        cuitLabel.setValue("Cuit:   ");
        htmlPanelGrid.getChildren().add(cuitLabel);
        
        InputTextarea cuitValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        cuitValue.setId("cuitValue");
        cuitValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.cuit}", String.class));
        cuitValue.setReadonly(true);
        cuitValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(cuitValue);
        
        return htmlPanelGrid;
    }
    
    public Cliente ClienteBean.getCliente() {
        if (cliente == null) {
            cliente = new Cliente();
        }
        return cliente;
    }
    
    public void ClienteBean.setCliente(Cliente cliente) {
        this.cliente = cliente;
    }
    
    public List<Automotor> ClienteBean.getSelectedAutomotors() {
        return selectedAutomotors;
    }
    
    public void ClienteBean.setSelectedAutomotors(List<Automotor> selectedAutomotors) {
        if (selectedAutomotors != null) {
            cliente.setAutomotors(new HashSet<Automotor>(selectedAutomotors));
        }
        this.selectedAutomotors = selectedAutomotors;
    }
    
    public boolean ClienteBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ClienteBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ClienteBean.displayList() {
        createDialogVisible = false;
        findAllClientes();
        return "cliente";
    }
    
    public String ClienteBean.displayCreateDialog() {
        cliente = new Cliente();
        createDialogVisible = true;
        return "cliente";
    }
    
    public String ClienteBean.persist() {
        String message = "";
        if (cliente.getId() != null) {
            cliente.merge();
            message = "Successfully updated";
        } else {
            cliente.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClientes();
    }
    
    public String ClienteBean.delete() {
        cliente.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClientes();
    }
    
    public void ClienteBean.reset() {
        cliente = null;
        selectedAutomotors = null;
        createDialogVisible = false;
    }
    
    public void ClienteBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
