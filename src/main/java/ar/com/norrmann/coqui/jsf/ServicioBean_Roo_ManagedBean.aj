// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.ServicioBean;
import ar.com.norrmann.coqui.model.Itemservicio;
import ar.com.norrmann.coqui.model.Servicio;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.event.CloseEvent;

privileged aspect ServicioBean_Roo_ManagedBean {
    
    declare @type: ServicioBean: @ManagedBean(name = "servicioBean");
    
    declare @type: ServicioBean: @SessionScoped;
    
    private String ServicioBean.name = "Servicios";
    
    private List<Servicio> ServicioBean.allServicios;
    
    private boolean ServicioBean.dataVisible = false;
    
    private List<String> ServicioBean.columns;
    
    private HtmlPanelGrid ServicioBean.createPanelGrid;
    
    private HtmlPanelGrid ServicioBean.editPanelGrid;
    
    private HtmlPanelGrid ServicioBean.viewPanelGrid;
    
    private boolean ServicioBean.createDialogVisible = false;
    
    private List<Itemservicio> ServicioBean.selectedItemservicios;
    
    @PostConstruct
    public void ServicioBean.init() {
        columns = new ArrayList<String>();
        columns.add("descripcion");
        columns.add("kilometros");
        columns.add("fecha");
    }
    
    public String ServicioBean.getName() {
        return name;
    }
    
    public List<String> ServicioBean.getColumns() {
        return columns;
    }
    
    public List<Servicio> ServicioBean.getAllServicios() {
        return allServicios;
    }
    
    public void ServicioBean.setAllServicios(List<Servicio> allServicios) {
        this.allServicios = allServicios;
    }
    
    public String ServicioBean.findAllServicios() {
        allServicios = Servicio.findAllServicios();
        dataVisible = !allServicios.isEmpty();
        return null;
    }
    
    public boolean ServicioBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ServicioBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ServicioBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ServicioBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ServicioBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ServicioBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ServicioBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ServicioBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public List<Itemservicio> ServicioBean.getSelectedItemservicios() {
        return selectedItemservicios;
    }
    
    public void ServicioBean.setSelectedItemservicios(List<Itemservicio> selectedItemservicios) {
        if (selectedItemservicios != null) {
            servicio.setItemservicios(new HashSet<Itemservicio>(selectedItemservicios));
        }
        this.selectedItemservicios = selectedItemservicios;
    }
    
    public String ServicioBean.onEdit() {
        if (servicio != null && servicio.getItemservicios() != null) {
            selectedItemservicios = new ArrayList<Itemservicio>(servicio.getItemservicios());
        }
        return null;
    }
    
    public boolean ServicioBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ServicioBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ServicioBean.displayList() {
        createDialogVisible = false;
        findAllServicios();
        return "servicio";
    }
    
    public String ServicioBean.delete() {
        servicio.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllServicios();
    }
    
    public void ServicioBean.reset() {
        servicio = null;
        selectedItemservicios = null;
        createDialogVisible = false;
    }
    
    public void ServicioBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
