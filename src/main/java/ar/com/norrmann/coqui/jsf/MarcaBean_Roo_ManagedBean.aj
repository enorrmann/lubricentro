// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.MarcaBean;
import ar.com.norrmann.coqui.jsf.converter.TipoitemConverter;
import ar.com.norrmann.coqui.model.Item;
import ar.com.norrmann.coqui.model.Marca;
import ar.com.norrmann.coqui.model.Modelo;
import ar.com.norrmann.coqui.model.Tipoitem;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect MarcaBean_Roo_ManagedBean {
    
    declare @type: MarcaBean: @ManagedBean(name = "marcaBean");
    
    declare @type: MarcaBean: @SessionScoped;
    
    private String MarcaBean.name = "Marcas";
    
    private Marca MarcaBean.marca;
    
    private List<Marca> MarcaBean.allMarcas;
    
    private boolean MarcaBean.dataVisible = false;
    
    private List<String> MarcaBean.columns;
    
    private HtmlPanelGrid MarcaBean.createPanelGrid;
    
    private HtmlPanelGrid MarcaBean.editPanelGrid;
    
    private HtmlPanelGrid MarcaBean.viewPanelGrid;
    
    private boolean MarcaBean.createDialogVisible = false;
    
    private List<Item> MarcaBean.selectedItems;
    
    private List<Modelo> MarcaBean.selectedModeloes;
    
    @PostConstruct
    public void MarcaBean.init() {
        columns = new ArrayList<String>();
        columns.add("marca");
    }
    
    public String MarcaBean.getName() {
        return name;
    }
    
    public List<String> MarcaBean.getColumns() {
        return columns;
    }
    
    public List<Marca> MarcaBean.getAllMarcas() {
        return allMarcas;
    }
    
    public void MarcaBean.setAllMarcas(List<Marca> allMarcas) {
        this.allMarcas = allMarcas;
    }
    
    public String MarcaBean.findAllMarcas() {
        allMarcas = Marca.findAllMarcas();
        dataVisible = !allMarcas.isEmpty();
        return null;
    }
    
    public boolean MarcaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void MarcaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid MarcaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void MarcaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid MarcaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void MarcaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid MarcaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void MarcaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid MarcaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText itemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsLabel.setId("itemsLabel");
        itemsLabel.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsLabel);
        
        HtmlOutputText itemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsValue.setId("itemsValue");
        itemsValue.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsValue);
        
        HtmlOutputText modeloesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloesLabel.setId("modeloesLabel");
        modeloesLabel.setValue("Modeloes:   ");
        htmlPanelGrid.getChildren().add(modeloesLabel);
        
        HtmlOutputText modeloesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloesValue.setId("modeloesValue");
        modeloesValue.setValue("This relationship is managed from the Modelo side");
        htmlPanelGrid.getChildren().add(modeloesValue);
        
        HtmlOutputText tipoItemIdLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdLabel.setId("tipoItemIdLabel");
        tipoItemIdLabel.setValue("Tipo Item Id:   ");
        htmlPanelGrid.getChildren().add(tipoItemIdLabel);
        
        HtmlOutputText tipoItemIdValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemIdValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{marcaBean.marca.tipoItemId}", Tipoitem.class));
        tipoItemIdValue.setConverter(new TipoitemConverter());
        htmlPanelGrid.getChildren().add(tipoItemIdValue);
        
        HtmlOutputText marcaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaLabel.setId("marcaLabel");
        marcaLabel.setValue("Marca:   ");
        htmlPanelGrid.getChildren().add(marcaLabel);
        
        InputTextarea marcaValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        marcaValue.setId("marcaValue");
        marcaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{marcaBean.marca.marca}", String.class));
        marcaValue.setReadonly(true);
        marcaValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(marcaValue);
        
        return htmlPanelGrid;
    }
    
    public Marca MarcaBean.getMarca() {
        if (marca == null) {
            marca = new Marca();
        }
        return marca;
    }
    
    public void MarcaBean.setMarca(Marca marca) {
        this.marca = marca;
    }
    
    public List<Item> MarcaBean.getSelectedItems() {
        return selectedItems;
    }
    
    public void MarcaBean.setSelectedItems(List<Item> selectedItems) {
        if (selectedItems != null) {
            marca.setItems(new HashSet<Item>(selectedItems));
        }
        this.selectedItems = selectedItems;
    }
    
    public List<Modelo> MarcaBean.getSelectedModeloes() {
        return selectedModeloes;
    }
    
    public void MarcaBean.setSelectedModeloes(List<Modelo> selectedModeloes) {
        if (selectedModeloes != null) {
            marca.setModeloes(new HashSet<Modelo>(selectedModeloes));
        }
        this.selectedModeloes = selectedModeloes;
    }
    
    public List<Tipoitem> MarcaBean.completeTipoItemId(String query) {
        List<Tipoitem> suggestions = new ArrayList<Tipoitem>();
        for (Tipoitem tipoitem : Tipoitem.findAllTipoitems()) {
            String tipoitemStr = String.valueOf(tipoitem.getTipoItem());
            if (tipoitemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoitem);
            }
        }
        return suggestions;
    }
    
    public String MarcaBean.onEdit() {
        if (marca != null && marca.getItems() != null) {
            selectedItems = new ArrayList<Item>(marca.getItems());
        }
        if (marca != null && marca.getModeloes() != null) {
            selectedModeloes = new ArrayList<Modelo>(marca.getModeloes());
        }
        return null;
    }
    
    public boolean MarcaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void MarcaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String MarcaBean.displayList() {
        createDialogVisible = false;
        findAllMarcas();
        return "marca";
    }
    
    public String MarcaBean.displayCreateDialog() {
        marca = new Marca();
        createDialogVisible = true;
        return "marca";
    }
    
    public String MarcaBean.persist() {
        String message = "";
        if (marca.getId() != null) {
            marca.merge();
            message = "Successfully updated";
        } else {
            marca.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMarcas();
    }
    
    public String MarcaBean.delete() {
        marca.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMarcas();
    }
    
    public void MarcaBean.reset() {
        marca = null;
        selectedItems = null;
        selectedModeloes = null;
        createDialogVisible = false;
    }
    
    public void MarcaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
