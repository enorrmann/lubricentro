// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.ModeloBean;
import ar.com.norrmann.coqui.jsf.converter.MarcaConverter;
import ar.com.norrmann.coqui.model.Automotor;
import ar.com.norrmann.coqui.model.Marca;
import ar.com.norrmann.coqui.model.Modelo;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ModeloBean_Roo_ManagedBean {
    
    declare @type: ModeloBean: @ManagedBean(name = "modeloBean");
    
    declare @type: ModeloBean: @SessionScoped;
    
    private String ModeloBean.name = "Modeloes";
    
    private Modelo ModeloBean.modelo;
    
    private List<Modelo> ModeloBean.allModeloes;
    
    private boolean ModeloBean.dataVisible = false;
    
    private List<String> ModeloBean.columns;
    
    private HtmlPanelGrid ModeloBean.createPanelGrid;
    
    private HtmlPanelGrid ModeloBean.editPanelGrid;
    
    private HtmlPanelGrid ModeloBean.viewPanelGrid;
    
    private boolean ModeloBean.createDialogVisible = false;
    
    private List<Automotor> ModeloBean.selectedAutomotors;
    
    @PostConstruct
    public void ModeloBean.init() {
        columns = new ArrayList<String>();
        columns.add("modelo");
    }
    
    public String ModeloBean.getName() {
        return name;
    }
    
    public List<String> ModeloBean.getColumns() {
        return columns;
    }
    
    public List<Modelo> ModeloBean.getAllModeloes() {
        return allModeloes;
    }
    
    public void ModeloBean.setAllModeloes(List<Modelo> allModeloes) {
        this.allModeloes = allModeloes;
    }
    
    public String ModeloBean.findAllModeloes() {
        allModeloes = Modelo.findAllModeloes();
        dataVisible = !allModeloes.isEmpty();
        return null;
    }
    
    public boolean ModeloBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ModeloBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ModeloBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ModeloBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ModeloBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ModeloBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ModeloBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ModeloBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ModeloBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText automotorsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsCreateOutput.setId("automotorsCreateOutput");
        automotorsCreateOutput.setValue("Automotors:   ");
        htmlPanelGrid.getChildren().add(automotorsCreateOutput);
        
        HtmlOutputText automotorsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsCreateInput.setId("automotorsCreateInput");
        automotorsCreateInput.setValue("This relationship is managed from the Automotor side");
        htmlPanelGrid.getChildren().add(automotorsCreateInput);
        
        Message automotorsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        automotorsCreateInputMessage.setId("automotorsCreateInputMessage");
        automotorsCreateInputMessage.setFor("automotorsCreateInput");
        automotorsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(automotorsCreateInputMessage);
        
        HtmlOutputText marcaIdCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaIdCreateOutput.setId("marcaIdCreateOutput");
        marcaIdCreateOutput.setValue("Marca Id:   ");
        htmlPanelGrid.getChildren().add(marcaIdCreateOutput);
        
        AutoComplete marcaIdCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        marcaIdCreateInput.setId("marcaIdCreateInput");
        marcaIdCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{modeloBean.modelo.marcaId}", Marca.class));
        marcaIdCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{modeloBean.completeMarcaId}", List.class, new Class[] { String.class }));
        marcaIdCreateInput.setDropdown(true);
        marcaIdCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "marcaId", String.class));
        marcaIdCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{marcaId.marca}", String.class));
        marcaIdCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{marcaId}", Marca.class));
        marcaIdCreateInput.setConverter(new MarcaConverter());
        marcaIdCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(marcaIdCreateInput);
        
        Message marcaIdCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        marcaIdCreateInputMessage.setId("marcaIdCreateInputMessage");
        marcaIdCreateInputMessage.setFor("marcaIdCreateInput");
        marcaIdCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(marcaIdCreateInputMessage);
        
        HtmlOutputText modeloCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloCreateOutput.setId("modeloCreateOutput");
        modeloCreateOutput.setValue("Modelo: * ");
        htmlPanelGrid.getChildren().add(modeloCreateOutput);
        
        InputTextarea modeloCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        modeloCreateInput.setId("modeloCreateInput");
        modeloCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{modeloBean.modelo.modelo}", String.class));
        LengthValidator modeloCreateInputValidator = new LengthValidator();
        modeloCreateInputValidator.setMaximum(255);
        modeloCreateInput.addValidator(modeloCreateInputValidator);
        modeloCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(modeloCreateInput);
        
        Message modeloCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        modeloCreateInputMessage.setId("modeloCreateInputMessage");
        modeloCreateInputMessage.setFor("modeloCreateInput");
        modeloCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(modeloCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ModeloBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText automotorsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsEditOutput.setId("automotorsEditOutput");
        automotorsEditOutput.setValue("Automotors:   ");
        htmlPanelGrid.getChildren().add(automotorsEditOutput);
        
        HtmlOutputText automotorsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsEditInput.setId("automotorsEditInput");
        automotorsEditInput.setValue("This relationship is managed from the Automotor side");
        htmlPanelGrid.getChildren().add(automotorsEditInput);
        
        Message automotorsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        automotorsEditInputMessage.setId("automotorsEditInputMessage");
        automotorsEditInputMessage.setFor("automotorsEditInput");
        automotorsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(automotorsEditInputMessage);
        
        HtmlOutputText marcaIdEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaIdEditOutput.setId("marcaIdEditOutput");
        marcaIdEditOutput.setValue("Marca Id:   ");
        htmlPanelGrid.getChildren().add(marcaIdEditOutput);
        
        AutoComplete marcaIdEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        marcaIdEditInput.setId("marcaIdEditInput");
        marcaIdEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{modeloBean.modelo.marcaId}", Marca.class));
        marcaIdEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{modeloBean.completeMarcaId}", List.class, new Class[] { String.class }));
        marcaIdEditInput.setDropdown(true);
        marcaIdEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "marcaId", String.class));
        marcaIdEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{marcaId.marca}", String.class));
        marcaIdEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{marcaId}", Marca.class));
        marcaIdEditInput.setConverter(new MarcaConverter());
        marcaIdEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(marcaIdEditInput);
        
        Message marcaIdEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        marcaIdEditInputMessage.setId("marcaIdEditInputMessage");
        marcaIdEditInputMessage.setFor("marcaIdEditInput");
        marcaIdEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(marcaIdEditInputMessage);
        
        HtmlOutputText modeloEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloEditOutput.setId("modeloEditOutput");
        modeloEditOutput.setValue("Modelo: * ");
        htmlPanelGrid.getChildren().add(modeloEditOutput);
        
        InputTextarea modeloEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        modeloEditInput.setId("modeloEditInput");
        modeloEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{modeloBean.modelo.modelo}", String.class));
        LengthValidator modeloEditInputValidator = new LengthValidator();
        modeloEditInputValidator.setMaximum(255);
        modeloEditInput.addValidator(modeloEditInputValidator);
        modeloEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(modeloEditInput);
        
        Message modeloEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        modeloEditInputMessage.setId("modeloEditInputMessage");
        modeloEditInputMessage.setFor("modeloEditInput");
        modeloEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(modeloEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ModeloBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText automotorsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsLabel.setId("automotorsLabel");
        automotorsLabel.setValue("Automotors:   ");
        htmlPanelGrid.getChildren().add(automotorsLabel);
        
        HtmlOutputText automotorsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        automotorsValue.setId("automotorsValue");
        automotorsValue.setValue("This relationship is managed from the Automotor side");
        htmlPanelGrid.getChildren().add(automotorsValue);
        
        HtmlOutputText marcaIdLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaIdLabel.setId("marcaIdLabel");
        marcaIdLabel.setValue("Marca Id:   ");
        htmlPanelGrid.getChildren().add(marcaIdLabel);
        
        HtmlOutputText marcaIdValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaIdValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{modeloBean.modelo.marcaId}", Marca.class));
        marcaIdValue.setConverter(new MarcaConverter());
        htmlPanelGrid.getChildren().add(marcaIdValue);
        
        HtmlOutputText modeloLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloLabel.setId("modeloLabel");
        modeloLabel.setValue("Modelo:   ");
        htmlPanelGrid.getChildren().add(modeloLabel);
        
        InputTextarea modeloValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        modeloValue.setId("modeloValue");
        modeloValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{modeloBean.modelo.modelo}", String.class));
        modeloValue.setReadonly(true);
        modeloValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(modeloValue);
        
        return htmlPanelGrid;
    }
    
    public Modelo ModeloBean.getModelo() {
        if (modelo == null) {
            modelo = new Modelo();
        }
        return modelo;
    }
    
    public void ModeloBean.setModelo(Modelo modelo) {
        this.modelo = modelo;
    }
    
    public List<Automotor> ModeloBean.getSelectedAutomotors() {
        return selectedAutomotors;
    }
    
    public void ModeloBean.setSelectedAutomotors(List<Automotor> selectedAutomotors) {
        if (selectedAutomotors != null) {
            modelo.setAutomotors(new HashSet<Automotor>(selectedAutomotors));
        }
        this.selectedAutomotors = selectedAutomotors;
    }
    
    public List<Marca> ModeloBean.completeMarcaId(String query) {
        List<Marca> suggestions = new ArrayList<Marca>();
        for (Marca marca : Marca.findAllMarcas()) {
            String marcaStr = String.valueOf(marca.getMarca());
            if (marcaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(marca);
            }
        }
        return suggestions;
    }
    
    public boolean ModeloBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ModeloBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ModeloBean.displayList() {
        createDialogVisible = false;
        findAllModeloes();
        return "modelo";
    }
    
    public String ModeloBean.displayCreateDialog() {
        modelo = new Modelo();
        createDialogVisible = true;
        return "modelo";
    }
    
    public String ModeloBean.persist() {
        String message = "";
        if (modelo.getId() != null) {
            modelo.merge();
            message = "Successfully updated";
        } else {
            modelo.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllModeloes();
    }
    
    public String ModeloBean.delete() {
        modelo.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllModeloes();
    }
    
    public void ModeloBean.reset() {
        modelo = null;
        selectedAutomotors = null;
        createDialogVisible = false;
    }
    
    public void ModeloBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
