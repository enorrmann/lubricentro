// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.TipoitemBean;
import ar.com.norrmann.coqui.model.Categoria;
import ar.com.norrmann.coqui.model.Item;
import ar.com.norrmann.coqui.model.Marca;
import ar.com.norrmann.coqui.model.Tipoitem;
import ar.com.norrmann.coqui.model.Tipomovimiento;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TipoitemBean_Roo_ManagedBean {
    
    declare @type: TipoitemBean: @ManagedBean(name = "tipoitemBean");
    
    declare @type: TipoitemBean: @SessionScoped;
    
    private Tipoitem TipoitemBean.tipoitem;
    
    private List<Tipoitem> TipoitemBean.allTipoitems;
    
    private boolean TipoitemBean.dataVisible = false;
    
    private List<String> TipoitemBean.columns;
    
    private HtmlPanelGrid TipoitemBean.createPanelGrid;
    
    private HtmlPanelGrid TipoitemBean.editPanelGrid;
    
    private HtmlPanelGrid TipoitemBean.viewPanelGrid;
    
    private boolean TipoitemBean.createDialogVisible = false;
    
    private List<Categoria> TipoitemBean.selectedCategorias;
    
    private List<Item> TipoitemBean.selectedItems;
    
    private List<Marca> TipoitemBean.selectedMarcas;
    
    private List<Tipomovimiento> TipoitemBean.selectedTipomovimientoes;
    
    @PostConstruct
    public void TipoitemBean.init() {
        columns = new ArrayList<String>();
        columns.add("tipoItem");
    }
    
    public List<String> TipoitemBean.getColumns() {
        return columns;
    }
    
    public List<Tipoitem> TipoitemBean.getAllTipoitems() {
        return allTipoitems;
    }
    
    public void TipoitemBean.setAllTipoitems(List<Tipoitem> allTipoitems) {
        this.allTipoitems = allTipoitems;
    }
    
    public String TipoitemBean.findAllTipoitems() {
        allTipoitems = Tipoitem.findAllTipoitems();
        dataVisible = !allTipoitems.isEmpty();
        return null;
    }
    
    public boolean TipoitemBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TipoitemBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TipoitemBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TipoitemBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TipoitemBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TipoitemBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TipoitemBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TipoitemBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TipoitemBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText categoriasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasLabel.setId("categoriasLabel");
        categoriasLabel.setValue("Categorias:   ");
        htmlPanelGrid.getChildren().add(categoriasLabel);
        
        HtmlOutputText categoriasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasValue.setId("categoriasValue");
        categoriasValue.setValue("This relationship is managed from the Categoria side");
        htmlPanelGrid.getChildren().add(categoriasValue);
        
        HtmlOutputText itemsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsLabel.setId("itemsLabel");
        itemsLabel.setValue("Items:   ");
        htmlPanelGrid.getChildren().add(itemsLabel);
        
        HtmlOutputText itemsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemsValue.setId("itemsValue");
        itemsValue.setValue("This relationship is managed from the Item side");
        htmlPanelGrid.getChildren().add(itemsValue);
        
        HtmlOutputText marcasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcasLabel.setId("marcasLabel");
        marcasLabel.setValue("Marcas:   ");
        htmlPanelGrid.getChildren().add(marcasLabel);
        
        HtmlOutputText marcasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcasValue.setId("marcasValue");
        marcasValue.setValue("This relationship is managed from the Marca side");
        htmlPanelGrid.getChildren().add(marcasValue);
        
        HtmlOutputText tipomovimientoesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipomovimientoesLabel.setId("tipomovimientoesLabel");
        tipomovimientoesLabel.setValue("Tipomovimientoes:   ");
        htmlPanelGrid.getChildren().add(tipomovimientoesLabel);
        
        HtmlOutputText tipomovimientoesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipomovimientoesValue.setId("tipomovimientoesValue");
        tipomovimientoesValue.setValue("This relationship is managed from the Tipomovimiento side");
        htmlPanelGrid.getChildren().add(tipomovimientoesValue);
        
        HtmlOutputText tipoItemLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoItemLabel.setId("tipoItemLabel");
        tipoItemLabel.setValue("Tipo Item:   ");
        htmlPanelGrid.getChildren().add(tipoItemLabel);
        
        InputTextarea tipoItemValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        tipoItemValue.setId("tipoItemValue");
        tipoItemValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoitemBean.tipoitem.tipoItem}", String.class));
        tipoItemValue.setReadonly(true);
        tipoItemValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(tipoItemValue);
        
        return htmlPanelGrid;
    }
    
    public Tipoitem TipoitemBean.getTipoitem() {
        if (tipoitem == null) {
            tipoitem = new Tipoitem();
        }
        return tipoitem;
    }
    
    public void TipoitemBean.setTipoitem(Tipoitem tipoitem) {
        this.tipoitem = tipoitem;
    }
    
    public List<Categoria> TipoitemBean.getSelectedCategorias() {
        return selectedCategorias;
    }
    
    public void TipoitemBean.setSelectedCategorias(List<Categoria> selectedCategorias) {
        if (selectedCategorias != null) {
            tipoitem.setCategorias(new HashSet<Categoria>(selectedCategorias));
        }
        this.selectedCategorias = selectedCategorias;
    }
    
    public List<Item> TipoitemBean.getSelectedItems() {
        return selectedItems;
    }
    
    public void TipoitemBean.setSelectedItems(List<Item> selectedItems) {
        if (selectedItems != null) {
            tipoitem.setItems(new HashSet<Item>(selectedItems));
        }
        this.selectedItems = selectedItems;
    }
    
    public List<Marca> TipoitemBean.getSelectedMarcas() {
        return selectedMarcas;
    }
    
    public void TipoitemBean.setSelectedMarcas(List<Marca> selectedMarcas) {
        if (selectedMarcas != null) {
            tipoitem.setMarcas(new HashSet<Marca>(selectedMarcas));
        }
        this.selectedMarcas = selectedMarcas;
    }
    
    public List<Tipomovimiento> TipoitemBean.getSelectedTipomovimientoes() {
        return selectedTipomovimientoes;
    }
    
    public void TipoitemBean.setSelectedTipomovimientoes(List<Tipomovimiento> selectedTipomovimientoes) {
        if (selectedTipomovimientoes != null) {
            tipoitem.setTipomovimientoes(new HashSet<Tipomovimiento>(selectedTipomovimientoes));
        }
        this.selectedTipomovimientoes = selectedTipomovimientoes;
    }
    
    public String TipoitemBean.onEdit() {
        if (tipoitem != null && tipoitem.getCategorias() != null) {
            selectedCategorias = new ArrayList<Categoria>(tipoitem.getCategorias());
        }
        if (tipoitem != null && tipoitem.getItems() != null) {
            selectedItems = new ArrayList<Item>(tipoitem.getItems());
        }
        if (tipoitem != null && tipoitem.getMarcas() != null) {
            selectedMarcas = new ArrayList<Marca>(tipoitem.getMarcas());
        }
        if (tipoitem != null && tipoitem.getTipomovimientoes() != null) {
            selectedTipomovimientoes = new ArrayList<Tipomovimiento>(tipoitem.getTipomovimientoes());
        }
        return null;
    }
    
    public boolean TipoitemBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TipoitemBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TipoitemBean.displayList() {
        createDialogVisible = false;
        findAllTipoitems();
        return "tipoitem";
    }
    
    public String TipoitemBean.displayCreateDialog() {
        tipoitem = new Tipoitem();
        createDialogVisible = true;
        return "tipoitem";
    }
    
    public String TipoitemBean.persist() {
        String message = "";
        if (tipoitem.getId() != null) {
            tipoitem.merge();
            message = "Successfully updated";
        } else {
            tipoitem.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoitems();
    }
    
    public String TipoitemBean.delete() {
        tipoitem.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoitems();
    }
    
    public void TipoitemBean.reset() {
        tipoitem = null;
        selectedCategorias = null;
        selectedItems = null;
        selectedMarcas = null;
        selectedTipomovimientoes = null;
        createDialogVisible = false;
    }
    
    public void TipoitemBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
