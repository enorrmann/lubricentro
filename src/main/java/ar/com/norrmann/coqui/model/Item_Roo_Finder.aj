// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.model;

import ar.com.norrmann.coqui.model.Categoria;
import ar.com.norrmann.coqui.model.Item;
import ar.com.norrmann.coqui.model.Marca;
import ar.com.norrmann.coqui.model.Tipoitem;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Item_Roo_Finder {
    
    public static TypedQuery<Item> Item.findItemsByCategoriaId(Categoria categoriaId) {
        if (categoriaId == null) throw new IllegalArgumentException("The categoriaId argument is required");
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE o.categoriaId = :categoriaId", Item.class);
        q.setParameter("categoriaId", categoriaId);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByCategoriaIdAndMarcaId(Categoria categoriaId, Marca marcaId) {
        if (categoriaId == null) throw new IllegalArgumentException("The categoriaId argument is required");
        if (marcaId == null) throw new IllegalArgumentException("The marcaId argument is required");
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE o.categoriaId = :categoriaId AND o.marcaId = :marcaId", Item.class);
        q.setParameter("categoriaId", categoriaId);
        q.setParameter("marcaId", marcaId);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByCategoriaIdOrMarcaId(Categoria categoriaId, Marca marcaId) {
        if (categoriaId == null) throw new IllegalArgumentException("The categoriaId argument is required");
        if (marcaId == null) throw new IllegalArgumentException("The marcaId argument is required");
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE o.categoriaId = :categoriaId OR o.marcaId = :marcaId", Item.class);
        q.setParameter("categoriaId", categoriaId);
        q.setParameter("marcaId", marcaId);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByCodigoEquals(String codigo) {
        if (codigo == null || codigo.length() == 0) throw new IllegalArgumentException("The codigo argument is required");
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE o.codigo = :codigo", Item.class);
        q.setParameter("codigo", codigo);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByCodigoLike(String codigo) {
        if (codigo == null || codigo.length() == 0) throw new IllegalArgumentException("The codigo argument is required");
        codigo = codigo.replace('*', '%');
        if (codigo.charAt(0) != '%') {
            codigo = "%" + codigo;
        }
        if (codigo.charAt(codigo.length() - 1) != '%') {
            codigo = codigo + "%";
        }
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE LOWER(o.codigo) LIKE LOWER(:codigo)", Item.class);
        q.setParameter("codigo", codigo);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByCodigoReferenciaLike(String codigoReferencia) {
        if (codigoReferencia == null || codigoReferencia.length() == 0) throw new IllegalArgumentException("The codigoReferencia argument is required");
        codigoReferencia = codigoReferencia.replace('*', '%');
        if (codigoReferencia.charAt(0) != '%') {
            codigoReferencia = "%" + codigoReferencia;
        }
        if (codigoReferencia.charAt(codigoReferencia.length() - 1) != '%') {
            codigoReferencia = codigoReferencia + "%";
        }
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE LOWER(o.codigoReferencia) LIKE LOWER(:codigoReferencia)", Item.class);
        q.setParameter("codigoReferencia", codigoReferencia);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByDescripcionLike(String descripcion) {
        if (descripcion == null || descripcion.length() == 0) throw new IllegalArgumentException("The descripcion argument is required");
        descripcion = descripcion.replace('*', '%');
        if (descripcion.charAt(0) != '%') {
            descripcion = "%" + descripcion;
        }
        if (descripcion.charAt(descripcion.length() - 1) != '%') {
            descripcion = descripcion + "%";
        }
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE LOWER(o.descripcion) LIKE LOWER(:descripcion)", Item.class);
        q.setParameter("descripcion", descripcion);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByMarcaId(Marca marcaId) {
        if (marcaId == null) throw new IllegalArgumentException("The marcaId argument is required");
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE o.marcaId = :marcaId", Item.class);
        q.setParameter("marcaId", marcaId);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByTipoItemId(Tipoitem tipoItemId) {
        if (tipoItemId == null) throw new IllegalArgumentException("The tipoItemId argument is required");
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE o.tipoItemId = :tipoItemId", Item.class);
        q.setParameter("tipoItemId", tipoItemId);
        return q;
    }
    
}
