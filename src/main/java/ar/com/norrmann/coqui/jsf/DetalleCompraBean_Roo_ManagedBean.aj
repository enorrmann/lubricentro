// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.DetalleCompraBean;
import ar.com.norrmann.coqui.model.Compra;
import ar.com.norrmann.coqui.model.DetalleCompra;
import ar.com.norrmann.coqui.model.Movimientoitem;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;

privileged aspect DetalleCompraBean_Roo_ManagedBean {
    
    declare @type: DetalleCompraBean: @ManagedBean(name = "detalleCompraBean");
    
    declare @type: DetalleCompraBean: @SessionScoped;
    
    private String DetalleCompraBean.name = "DetalleCompras";
    
    private List<DetalleCompra> DetalleCompraBean.allDetalleCompras;
    
    private boolean DetalleCompraBean.dataVisible = false;
    
    private List<String> DetalleCompraBean.columns;
    
    private HtmlPanelGrid DetalleCompraBean.createPanelGrid;
    
    private HtmlPanelGrid DetalleCompraBean.editPanelGrid;
    
    private HtmlPanelGrid DetalleCompraBean.viewPanelGrid;
    
    private boolean DetalleCompraBean.createDialogVisible = false;
    
    @PostConstruct
    public void DetalleCompraBean.init() {
        columns = new ArrayList<String>();
        columns.add("precioUnitario");
        columns.add("cantidad");
    }
    
    public String DetalleCompraBean.getName() {
        return name;
    }
    
    public List<String> DetalleCompraBean.getColumns() {
        return columns;
    }
    
    public List<DetalleCompra> DetalleCompraBean.getAllDetalleCompras() {
        return allDetalleCompras;
    }
    
    public void DetalleCompraBean.setAllDetalleCompras(List<DetalleCompra> allDetalleCompras) {
        this.allDetalleCompras = allDetalleCompras;
    }
    
    public String DetalleCompraBean.findAllDetalleCompras() {
        allDetalleCompras = DetalleCompra.findAllDetalleCompras();
        dataVisible = !allDetalleCompras.isEmpty();
        return null;
    }
    
    public boolean DetalleCompraBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DetalleCompraBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DetalleCompraBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DetalleCompraBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCompraBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DetalleCompraBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCompraBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DetalleCompraBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public List<Compra> DetalleCompraBean.completeCompra(String query) {
        List<Compra> suggestions = new ArrayList<Compra>();
        for (Compra compra : Compra.findAllCompras()) {
            String compraStr = String.valueOf(compra.getFechaCompra());
            if (compraStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(compra);
            }
        }
        return suggestions;
    }
    
    public List<Movimientoitem> DetalleCompraBean.completeMovimientoIngresoStock(String query) {
        List<Movimientoitem> suggestions = new ArrayList<Movimientoitem>();
        for (Movimientoitem movimientoitem : Movimientoitem.findAllMovimientoitems()) {
            String movimientoitemStr = String.valueOf(movimientoitem.getCantidad() +  " "  + movimientoitem.getFecha() +  " "  + movimientoitem.getObservaciones());
            if (movimientoitemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(movimientoitem);
            }
        }
        return suggestions;
    }
    
    public String DetalleCompraBean.onEdit() {
        return null;
    }
    
    public boolean DetalleCompraBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DetalleCompraBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DetalleCompraBean.displayList() {
        createDialogVisible = false;
        findAllDetalleCompras();
        return "detalleCompra";
    }
    
    public String DetalleCompraBean.displayCreateDialog() {
        detalleCompra = new DetalleCompra();
        createDialogVisible = true;
        return "detalleCompra";
    }
    
    public void DetalleCompraBean.reset() {
        detalleCompra = null;
        createDialogVisible = false;
    }
    
}
