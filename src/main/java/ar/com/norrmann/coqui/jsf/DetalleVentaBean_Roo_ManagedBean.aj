// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.DetalleVentaBean;
import ar.com.norrmann.coqui.model.DetalleVenta;
import ar.com.norrmann.coqui.model.Item;
import ar.com.norrmann.coqui.model.Movimientoitem;
import ar.com.norrmann.coqui.model.Venta;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import org.primefaces.event.CloseEvent;

privileged aspect DetalleVentaBean_Roo_ManagedBean {
    
    declare @type: DetalleVentaBean: @ManagedBean(name = "detalleVentaBean");
    
    declare @type: DetalleVentaBean: @SessionScoped;
    
    private String DetalleVentaBean.name = "DetalleVentas";
    
    private List<DetalleVenta> DetalleVentaBean.allDetalleVentas;
    
    private boolean DetalleVentaBean.dataVisible = false;
    
    private List<String> DetalleVentaBean.columns;
    
    private HtmlPanelGrid DetalleVentaBean.createPanelGrid;
    
    private HtmlPanelGrid DetalleVentaBean.editPanelGrid;
    
    private HtmlPanelGrid DetalleVentaBean.viewPanelGrid;
    
    private boolean DetalleVentaBean.createDialogVisible = false;
    
    @PostConstruct
    public void DetalleVentaBean.init() {
        columns = new ArrayList<String>();
        columns.add("precioUnitario");
        columns.add("cantidad");
    }
    
    public String DetalleVentaBean.getName() {
        return name;
    }
    
    public List<String> DetalleVentaBean.getColumns() {
        return columns;
    }
    
    public List<DetalleVenta> DetalleVentaBean.getAllDetalleVentas() {
        return allDetalleVentas;
    }
    
    public void DetalleVentaBean.setAllDetalleVentas(List<DetalleVenta> allDetalleVentas) {
        this.allDetalleVentas = allDetalleVentas;
    }
    
    public String DetalleVentaBean.findAllDetalleVentas() {
        allDetalleVentas = DetalleVenta.findAllDetalleVentas();
        dataVisible = !allDetalleVentas.isEmpty();
        return null;
    }
    
    public boolean DetalleVentaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DetalleVentaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DetalleVentaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DetalleVentaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DetalleVentaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DetalleVentaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DetalleVentaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DetalleVentaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public DetalleVenta DetalleVentaBean.getDetalleVenta() {
        if (detalleVenta == null) {
            detalleVenta = new DetalleVenta();
        }
        return detalleVenta;
    }
    
    public void DetalleVentaBean.setDetalleVenta(DetalleVenta detalleVenta) {
        this.detalleVenta = detalleVenta;
    }
    
    public List<Venta> DetalleVentaBean.completeVenta(String query) {
        List<Venta> suggestions = new ArrayList<Venta>();
        for (Venta venta : Venta.findAllVentas()) {
            String ventaStr = String.valueOf(venta.getFecha());
            if (ventaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(venta);
            }
        }
        return suggestions;
    }
    
    public List<Item> DetalleVentaBean.completeItem(String query) {
        List<Item> suggestions = new ArrayList<Item>();
        for (Item item : Item.findAllItems()) {
            String itemStr = String.valueOf(item.getPrecioCosto() +  " "  + item.getPrecioVenta() +  " "  + item.getPuntoReposicion() +  " "  + item.getStockActual());
            if (itemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(item);
            }
        }
        return suggestions;
    }
    
    public List<Movimientoitem> DetalleVentaBean.completeMovimientoEgresoStock(String query) {
        List<Movimientoitem> suggestions = new ArrayList<Movimientoitem>();
        for (Movimientoitem movimientoitem : Movimientoitem.findAllMovimientoitems()) {
            String movimientoitemStr = String.valueOf(movimientoitem.getCantidad() +  " "  + movimientoitem.getFecha() +  " "  + movimientoitem.getObservaciones());
            if (movimientoitemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(movimientoitem);
            }
        }
        return suggestions;
    }
    
    public String DetalleVentaBean.onEdit() {
        return null;
    }
    
    public boolean DetalleVentaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DetalleVentaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DetalleVentaBean.displayList() {
        createDialogVisible = false;
        findAllDetalleVentas();
        return "detalleVenta";
    }
    
    public String DetalleVentaBean.displayCreateDialog() {
        detalleVenta = new DetalleVenta();
        createDialogVisible = true;
        return "detalleVenta";
    }
    
    public void DetalleVentaBean.reset() {
        detalleVenta = null;
        createDialogVisible = false;
    }
    
    public void DetalleVentaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
