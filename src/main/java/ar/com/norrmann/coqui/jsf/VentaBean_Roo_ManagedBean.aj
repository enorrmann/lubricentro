// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.VentaBean;
import ar.com.norrmann.coqui.model.Cliente;
import ar.com.norrmann.coqui.model.DetalleVenta;
import ar.com.norrmann.coqui.model.FormaDePago;
import ar.com.norrmann.coqui.model.Venta;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import org.primefaces.event.CloseEvent;

privileged aspect VentaBean_Roo_ManagedBean {
    
    declare @type: VentaBean: @ManagedBean(name = "ventaBean");
    
    declare @type: VentaBean: @SessionScoped;
    
    private String VentaBean.name = "Ventas";
    
    private List<Venta> VentaBean.allVentas;
    
    private boolean VentaBean.dataVisible = false;
    
    private List<String> VentaBean.columns;
    
    private HtmlPanelGrid VentaBean.createPanelGrid;
    
    private HtmlPanelGrid VentaBean.editPanelGrid;
    
    private HtmlPanelGrid VentaBean.viewPanelGrid;
    
    private boolean VentaBean.createDialogVisible = false;
    
    private List<DetalleVenta> VentaBean.selectedDetalleList;
    
    @PostConstruct
    public void VentaBean.init() {
        columns = new ArrayList<String>();
        columns.add("fecha");
    }
    
    public String VentaBean.getName() {
        return name;
    }
    
    public List<String> VentaBean.getColumns() {
        return columns;
    }
    
    public List<Venta> VentaBean.getAllVentas() {
        return allVentas;
    }
    
    public void VentaBean.setAllVentas(List<Venta> allVentas) {
        this.allVentas = allVentas;
    }
    
    public String VentaBean.findAllVentas() {
        allVentas = Venta.findAllVentas();
        dataVisible = !allVentas.isEmpty();
        return null;
    }
    
    public boolean VentaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void VentaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid VentaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void VentaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid VentaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void VentaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid VentaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void VentaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public List<Cliente> VentaBean.completeCliente(String query) {
        List<Cliente> suggestions = new ArrayList<Cliente>();
        for (Cliente cliente : Cliente.findAllClientes()) {
            String clienteStr = String.valueOf(cliente.getApellido() +  " "  + cliente.getDomicilio() +  " "  + cliente.getEmail() +  " "  + cliente.getNombres());
            if (clienteStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(cliente);
            }
        }
        return suggestions;
    }
    
    public List<DetalleVenta> VentaBean.getSelectedDetalleList() {
        return selectedDetalleList;
    }
    
    public void VentaBean.setSelectedDetalleList(List<DetalleVenta> selectedDetalleList) {
        if (selectedDetalleList != null) {
            venta.setDetalleList(new HashSet<DetalleVenta>(selectedDetalleList));
        }
        this.selectedDetalleList = selectedDetalleList;
    }
    
    public List<FormaDePago> VentaBean.completeFormaDePago(String query) {
        List<FormaDePago> suggestions = new ArrayList<FormaDePago>();
        for (FormaDePago formaDePago : FormaDePago.values()) {
            if (formaDePago.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(formaDePago);
            }
        }
        return suggestions;
    }
    
    public String VentaBean.onEdit() {
        if (venta != null && venta.getDetalleList() != null) {
            selectedDetalleList = new ArrayList<DetalleVenta>(venta.getDetalleList());
        }
        return null;
    }
    
    public boolean VentaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void VentaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String VentaBean.displayList() {
        createDialogVisible = false;
        findAllVentas();
        return "venta";
    }
    
    public String VentaBean.displayCreateDialog() {
        venta = new Venta();
        createDialogVisible = true;
        return "venta";
    }
    
    public void VentaBean.reset() {
        venta = null;
        selectedDetalleList = null;
        createDialogVisible = false;
    }
    
    public void VentaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
