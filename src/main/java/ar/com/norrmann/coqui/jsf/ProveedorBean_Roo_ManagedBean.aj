// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.ProveedorBean;
import ar.com.norrmann.coqui.model.Proveedor;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ProveedorBean_Roo_ManagedBean {
    
    declare @type: ProveedorBean: @ManagedBean(name = "proveedorBean");
    
    declare @type: ProveedorBean: @SessionScoped;
    
    private String ProveedorBean.name = "Proveedors";
    
    private Proveedor ProveedorBean.proveedor;
    
    private List<Proveedor> ProveedorBean.allProveedors;
    
    private boolean ProveedorBean.dataVisible = false;
    
    private List<String> ProveedorBean.columns;
    
    private HtmlPanelGrid ProveedorBean.createPanelGrid;
    
    private HtmlPanelGrid ProveedorBean.editPanelGrid;
    
    private HtmlPanelGrid ProveedorBean.viewPanelGrid;
    
    private boolean ProveedorBean.createDialogVisible = false;
    
    @PostConstruct
    public void ProveedorBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
    }
    
    public String ProveedorBean.getName() {
        return name;
    }
    
    public List<String> ProveedorBean.getColumns() {
        return columns;
    }
    
    public List<Proveedor> ProveedorBean.getAllProveedors() {
        return allProveedors;
    }
    
    public void ProveedorBean.setAllProveedors(List<Proveedor> allProveedors) {
        this.allProveedors = allProveedors;
    }
    
    public String ProveedorBean.findAllProveedors() {
        allProveedors = Proveedor.findAllProveedors();
        dataVisible = !allProveedors.isEmpty();
        return null;
    }
    
    public boolean ProveedorBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ProveedorBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ProveedorBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ProveedorBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ProveedorBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ProveedorBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ProveedorBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ProveedorBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ProveedorBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputTextarea nombreCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{proveedorBean.proveedor.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMaximum(255);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProveedorBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputTextarea nombreEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{proveedorBean.proveedor.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMaximum(255);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProveedorBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:   ");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        InputTextarea nombreValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{proveedorBean.proveedor.nombre}", String.class));
        nombreValue.setReadonly(true);
        nombreValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nombreValue);
        
        return htmlPanelGrid;
    }
    
    public Proveedor ProveedorBean.getProveedor() {
        if (proveedor == null) {
            proveedor = new Proveedor();
        }
        return proveedor;
    }
    
    public void ProveedorBean.setProveedor(Proveedor proveedor) {
        this.proveedor = proveedor;
    }
    
    public String ProveedorBean.onEdit() {
        return null;
    }
    
    public boolean ProveedorBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ProveedorBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ProveedorBean.displayList() {
        createDialogVisible = false;
        findAllProveedors();
        return "proveedor";
    }
    
    public String ProveedorBean.displayCreateDialog() {
        proveedor = new Proveedor();
        createDialogVisible = true;
        return "proveedor";
    }
    
    public String ProveedorBean.persist() {
        String message = "";
        if (proveedor.getId() != null) {
            proveedor.merge();
            message = "Successfully updated";
        } else {
            proveedor.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProveedors();
    }
    
    public String ProveedorBean.delete() {
        proveedor.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProveedors();
    }
    
    public void ProveedorBean.reset() {
        proveedor = null;
        createDialogVisible = false;
    }
    
    public void ProveedorBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
