// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.coqui.jsf;

import ar.com.norrmann.coqui.jsf.AutomotorBean;
import ar.com.norrmann.coqui.model.Automotor;
import ar.com.norrmann.coqui.model.Cliente;
import ar.com.norrmann.coqui.model.Servicio;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect AutomotorBean_Roo_ManagedBean {
    
    declare @type: AutomotorBean: @ManagedBean(name = "automotorBean");
    
    declare @type: AutomotorBean: @SessionScoped;
    
    private Automotor AutomotorBean.automotor;
    
    private List<Automotor> AutomotorBean.allAutomotors;
    
    private boolean AutomotorBean.dataVisible = false;
    
    private List<String> AutomotorBean.columns;
    
    private HtmlPanelGrid AutomotorBean.createPanelGrid;
    
    private HtmlPanelGrid AutomotorBean.editPanelGrid;
    
    private HtmlPanelGrid AutomotorBean.viewPanelGrid;
    
    private boolean AutomotorBean.createDialogVisible = false;
    
    private List<Servicio> AutomotorBean.selectedServicios;
    
    @PostConstruct
    public void AutomotorBean.init() {
        columns = new ArrayList<String>();
        columns.add("anio");
        columns.add("dominio");
    }
    
    public String AutomotorBean.getName() {
        return name;
    }
    
    public List<String> AutomotorBean.getColumns() {
        return columns;
    }
    
    public List<Automotor> AutomotorBean.getAllAutomotors() {
        return allAutomotors;
    }
    
    public void AutomotorBean.setAllAutomotors(List<Automotor> allAutomotors) {
        this.allAutomotors = allAutomotors;
    }
    
    public String AutomotorBean.findAllAutomotors() {
        allAutomotors = Automotor.findAllAutomotors();
        dataVisible = !allAutomotors.isEmpty();
        return null;
    }
    
    public boolean AutomotorBean.isDataVisible() {
        return dataVisible;
    }
    
    public void AutomotorBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid AutomotorBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void AutomotorBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid AutomotorBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void AutomotorBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid AutomotorBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void AutomotorBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public Automotor AutomotorBean.getAutomotor() {
        if (automotor == null) {
            automotor = new Automotor();
        }
        return automotor;
    }
    
    public void AutomotorBean.setAutomotor(Automotor automotor) {
        this.automotor = automotor;
    }
    
    public List<Servicio> AutomotorBean.getSelectedServicios() {
        return selectedServicios;
    }
    
    public void AutomotorBean.setSelectedServicios(List<Servicio> selectedServicios) {
        if (selectedServicios != null) {
            automotor.setServicios(new HashSet<Servicio>(selectedServicios));
        }
        this.selectedServicios = selectedServicios;
    }
    
    public List<Cliente> AutomotorBean.completePropietarioId(String query) {
        List<Cliente> suggestions = new ArrayList<Cliente>();
        for (Cliente cliente : Cliente.findAllClientes()) {
            String clienteStr = String.valueOf(cliente.getApellido() +  " "  + cliente.getDomicilio() +  " "  + cliente.getEmail() +  " "  + cliente.getNombres());
            if (clienteStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(cliente);
            }
        }
        return suggestions;
    }
    
    public boolean AutomotorBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void AutomotorBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String AutomotorBean.displayList() {
        createDialogVisible = false;
        findAllAutomotors();
        return "automotor";
    }
    
    public String AutomotorBean.displayCreateDialog() {
        automotor = new Automotor();
        createDialogVisible = true;
        return "automotor";
    }
    
    public String AutomotorBean.persist() {
        String message = "";
        if (automotor.getId() != null) {
            automotor.merge();
            message = "Successfully updated";
        } else {
            automotor.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAutomotors();
    }
    
    public String AutomotorBean.delete() {
        automotor.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAutomotors();
    }
    
    public void AutomotorBean.reset() {
        automotor = null;
        selectedServicios = null;
        createDialogVisible = false;
    }
    
    public void AutomotorBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
